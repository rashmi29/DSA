class Solution {
    public int findCircleNum(int[][] isConnected) {
        // Convert adj matrix to adj list
        List<List<Integer>> adjList = new ArrayList<>();
        int n = isConnected.length;
        for(int i = 0; i < n ; i++ ) {
            adjList.add(new ArrayList<>());
        }

        for(int i = 0; i < n ; i++) {
            for(int j = 0; j < n ; j++) {
                if(isConnected[i][j] == 1 && i != j) {
                    adjList.get(i).add(j);
                    adjList.get(j).add(i);
                }
            }
        }

        boolean[] visited = new boolean[n];
        int noOfProvince = 0;

        for(int i = 0; i < n; i++) {
            if(!visited[i]) {
                noOfProvince++;
                dfs(i, visited, adjList);
            }
        }

        return noOfProvince;
    }

    void dfs(int node, boolean[] visited, List<List<Integer>> adjList) {
        visited[node] = true;

        for(Integer neighbour: adjList.get(node)) {
            if(!visited[neighbour]) {
                dfs(neighbour, visited, adjList);
            }
        }
    }
}
