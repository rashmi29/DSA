class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] vis = new boolean[V];
        boolean[] pathVis = new boolean[V];
        
        for(int i = 0 ; i < V; i++) {
            if(!vis[i]) {
                if(dfsCheck(i, vis, pathVis, adj))
                    return true;
            }
        }
        return false;
    }
    
    private boolean dfsCheck(int node, boolean[] vis, boolean[] pathVis, ArrayList<ArrayList<Integer>> adj) {
        vis[node] = true;
        pathVis[node] = true;
        
        for(int it: adj.get(node)) {
            if(!vis[it]) {
                if(dfsCheck(it, vis, pathVis, adj))
                    return true;
            } else if (pathVis[it]) {
                return true;
            }
        }
        
        pathVis[node] = false;
        return false;
    }
}
