class Solution {
    public int numEnclaves(int[][] grid) {
      int n = grid.length;
      int m = grid[0].length;
      int[] di = new int[] {-1,0,1,0};
      int[] dj = new int[] {0,1,0,-1};

      boolean[][] visited = new boolean[n][m];

      Queue<Pair> q = new LinkedList<>();  
      for(int i = 0; i < n ; i++) {
          if(grid[i][0] == 1) {
              visited[i][0] = true;
              q.offer(new Pair(i,0));
          }

          if(grid[i][m-1] == 1) {
              visited[i][m-1] = true;
              q.offer(new Pair(i,m-1));
          }
      }

      for(int i = 0; i < m ; i++) {
          if(grid[0][i] == 1) {
              visited[0][i] = true;
              q.offer(new Pair(0,i));
          }

          if(grid[n-1][i] == 1) {
              visited[n-1][i] = true;
              q.offer(new Pair(n-1,i));
          }
      }

      int ans = 0;
        
      while(!q.isEmpty()) {
          int row = q.peek().row;
          int col = q.poll().col;
        

          for(int i = 0; i < 4; i++) {
            int nRow = row + di[i];
            int nCol = col + dj[i];

            if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m && !visited[nRow][nCol] && grid[nRow][nCol] == 1) {
                visited[nRow][nCol] = true;
                q.offer(new Pair(nRow, nCol));
            }
          }
      }

    for(int i = 0 ; i < n; i++) {
        for(int j = 0 ; j < m ; j++) {
            if(grid[i][j] == 1 && !visited[i][j]){
                ans++;
            }
        }
    }
      return ans;
    }
}

class Pair {
    int row, col;

    Pair(int row, int col) {
        this.row = row;
        this.col = col;
    }
}
