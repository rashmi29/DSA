class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int n = mat.length;
        int m = mat[0].length;

        boolean[][] visited = new boolean[n][m];
        int[][] resultMat = mat;

        Queue<Pair> q = new LinkedList<>();
        for(int i = 0; i < n ; i++) {
            for(int j = 0; j < m ; j++) {
                if(mat[i][j] == 0) {
                    q.offer(new Pair(i,j,0));
                    visited[i][j] = true;
                }
            }
        }

        int[] di = new int[]{-1,0,1,0};
        int[] dj = new int[] {0,1,0,-1};

        while(!q.isEmpty()) {
            int row = q.peek().row;
            int col = q.peek().col;
            int dist = q.poll().dist;

            resultMat[row][col] = dist;

            for(int i = 0; i < 4; i++) {
                int nRow = row+di[i];
                int nCol = col+dj[i];

                if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m && !visited[nRow][nCol] && mat[nRow][nCol] == 1) {
                    visited[nRow][nCol] = true;
                    q.offer(new Pair(nRow, nCol, dist+1));
                }
            }
        }

        return resultMat;
    }
}

class Pair {
    int row, col, dist;

    Pair(int row, int col, int dist) {
        this.row = row;
        this.col = col;
        this.dist = dist;
    }
}
