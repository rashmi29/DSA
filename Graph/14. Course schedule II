class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] indegree = new int[numCourses];

        List<List<Integer>> adj = new ArrayList<>();
       // Create adjcency list and indegree array
       for(int i = 0 ; i < numCourses; i++) {
           adj.add(new ArrayList<>());
       } 

       for(int i = 0 ; i < prerequisites.length; i++) {
           adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
       }

       for(int i = 0; i < numCourses; i++) {
           for(int it: adj.get(i)) {
               indegree[it]++;
           }
       }

       int[] result = new int[numCourses];
       int index = 0;
        Queue<Integer> q = new LinkedList<>();

        for(int i = 0; i < numCourses ; i++) {
            if(indegree[i] == 0) {
                q.offer(i);
            }
        }

        while(!q.isEmpty()) {
            int node = q.poll();
            result[index++] = node;

            for(int it: adj.get(node)) {
                indegree[it] = indegree[it] - 1;
                if(indegree[it] == 0) {
                    q.offer(it);
                }
            }
        }

       if(index != numCourses)
        return new int[]{};
    
        return result;
    }
}
