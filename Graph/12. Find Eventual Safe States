class Solution {
    // Approach 2 - topological sort
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n = graph.length;
        int m = graph[0].length;

        //reverse and indegree
        List<List<Integer>> rev = new ArrayList<>();
        int[] indegree = new int[n];
        for(int i = 0; i < n ; i++) {
            rev.add(new ArrayList<>());
        }

        for(int i = 0; i < n ; i++) {
            for(int it: graph[i]) {
                rev.get(it).add(i);
                indegree[i]++;
            }
        }

        Queue<Integer> q = new LinkedList<>();
        List<Integer> result = new ArrayList<>();
        for(int i = 0; i < n ; i++) {
            if(indegree[i] == 0) {
                q.offer(i);
            }
        }

        while(!q.isEmpty()) {
            int node = q.poll();
            result.add(node);
            for(int it: rev.get(node)) {
                indegree[it]--;
                if(indegree[it]==0)
                    q.offer(it);
            }
        }

        Collections.sort(result);
        return result;
    }
}
