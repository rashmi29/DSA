class Solution {
    public int orangesRotting(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        boolean[][] visited = new boolean[n][m];
        int freshOrg = 0;

        Queue<Pair> q = new LinkedList<>();
        for(int i = 0; i< n; i++) {
            for(int j = 0; j < m; j++) {
                if(grid[i][j] == 2) {
                    q.offer(new Pair(i, j, 0));
                } else if(grid[i][j] == 1) {
                    freshOrg++;
                }
            }
        }

        int[] di = new int[] {-1,0,+1,0};
        int[] dj = new int[] {0,1,0,-1};

        int time = 0, rottenOrg = 0;
        while(!q.isEmpty()) {
            int row = q.peek().row;
            int col = q.peek().col;
            time = q.peek().time;
            q.poll();

            visited[row][col] = true;

            for(int i = 0; i < 4; i++) {
                int nextRow = row+di[i];
                int nextCol = col+dj[i];

                if(nextRow >= 0&& nextRow < n && nextCol >= 0 && nextCol < m && grid[nextRow][nextCol] == 1 && !visited[nextRow][nextCol]) {
                    visited[nextRow][nextCol] = true;
                    q.offer(new Pair(nextRow, nextCol, time+1));
                    rottenOrg++;
                }
            }
        }

        if(freshOrg != rottenOrg)
            return -1;
        return time;
    }
}

class Pair {
    int row, col, time;
    Pair(int row, int col, int time) {
        this.row = row;
        this.col = col; 
        this.time = time;
    }
}
