class Solution {
    public void solveSudoku(char[][] board) {
        solve(board);
    }

    private boolean solve(char[][] board) {
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[i].length; j++) {

                if(board[i][j] == '.') {
                    for(char k = '1'; k <= '9'; k++) {
                        if(isValid(i, j, k, board)) {
                            board[i][j] = k;
                            if(solve(board)) {
                                return true;
                            } else {
                                board[i][j] = '.';
                            } 
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

    private boolean isValid(int row, int col, char val, char[][] board) {
        for(int i = 0; i<board.length; i++) {
            if(board[row][i] == val)
                return false;

            if(board[i][col] == val)
                return false;

            if(board[3*(row/3) + (i/3)][3*(col/3) + (i%3)] == val) 
                return false;
        }

        return true;
    }
}
