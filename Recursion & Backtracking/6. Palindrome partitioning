class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        List<String> path = new ArrayList<>();

        solve(0, s, path, result);
        return result;
    }

    private void solve(int partIdx, String s, List<String> path, List<List<String>> result) {
        if(partIdx == s.length()) {
            result.add(new ArrayList<>(path));
            return;
        }

        for(int i = partIdx; i < s.length(); i++) {
            if(isPalindrome(s, partIdx, i)) {
                path.add(s.substring(partIdx, i+1));
                solve(i+1, s, path, result);
                path.remove(path.size()-1);
            }
        }
    }

    private boolean isPalindrome(String s, int start, int end) {
        while(start<=end) {
            if(s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}
