class Solution {
    
    // Using backtracking
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        findPermutations(0, result, nums);
        return result;
    }
    
    void findPermutations(int index, List<List<Integer>> result, int[] nums) {
        if(index == nums.length-1)
        {
            List<Integer> ds = new ArrayList<>();
            for(int num : nums) {
                ds.add(num);
            }
            
            result.add(new ArrayList<>(ds));
            return;
        }
        
        for(int i = index; i < nums.length; i++) {
            swap(nums, index, i);
            findPermutations(index+1, result, nums);
            swap(nums, index, i);
        }
    }
    
    void swap(int[] nums, int i, int j) {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
}
