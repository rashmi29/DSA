class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        findCombinations(0, candidates, target, result, new ArrayList<>());
        return result;
    }
    
    
    public void findCombinations(int index, int[] candidates, int target, List<List<Integer>> result, List<Integer> ds) {
        if(index == candidates.length) {
            if(target == 0) {
                result.add(new ArrayList<>(ds));
            }
            return;
        }
        
        // Pick
        if(candidates[index] <= target) {
            ds.add(candidates[index]);
            findCombinations(index, candidates, target - candidates[index], result, ds);
            ds.remove(ds.size() - 1);
        }
        
        // Not pick
        findCombinations(index + 1, candidates, target, result, ds);
    }
}


/* Whenever we have an array and we need to find the combinations then start thingking in a way that "Pick- Not pick"

Time complexity - O(2^t * k)
Space complexity - O(k*x)
*/

