class MedianFinder {
    PriorityQueue<Integer> smallHeap ;
    PriorityQueue<Integer> largeHeap ;

    public MedianFinder() {
        smallHeap = new PriorityQueue<>((a,b)->Integer.compare(b,a));
        largeHeap = new PriorityQueue<>();
    }
    
    public void addNum(int num) {
        smallHeap.offer(num);

        // Check that smallHeap contains smaller elements than largeHeap
        if((smallHeap.size() != 0 && largeHeap.size() != 0) && (smallHeap.peek() > largeHeap.peek())) {
            largeHeap.offer(smallHeap.poll());
        }

        // When heap size is not balanced - smallHeap has more elements
        if(smallHeap.size() - largeHeap.size() > 1) {
            largeHeap.offer(smallHeap.poll());
        }

        // When heap size is not balanced - largeHeap has more elements
        if(largeHeap.size() - smallHeap.size() > 1) {
            smallHeap.offer(largeHeap.poll());
        }
    }
    
    public double findMedian() {
        if(smallHeap.size() > largeHeap.size()) {
            return smallHeap.peek();
        } else if(smallHeap.size() < largeHeap.size()) {
            return largeHeap.peek();
        }else{
            return  ((double)(largeHeap.peek() + smallHeap.peek())/2.0);
        }
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */
