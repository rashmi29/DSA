class Solution {
    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<Pair> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        
        for(int i = 0; i < points.length; i++) {
            int dist = ((points[i][0]*points[i][0])) + ((points[i][1]*points[i][1]));
            
            maxHeap.add(new Pair(dist, new int[][]{{points[i][0], points[i][1]}}));
            
            if(maxHeap.size() > k)
                maxHeap.poll();
        }
        
        int[][] result = new int[k][2];
        int index = 0;
        while(maxHeap.size() > 0) {
            int[][] point = maxHeap.poll().point;
            result[index][0] = point[0][0];
            result[index++][1] = point[0][1];
        }
        
        return result;
    }
}

class Pair implements Comparable<Pair> {
    int dist;
    int[][] point = new int[1][1];
    
    Pair(int dist, int[][] point) {
        this.dist = dist;
        this.point = point;
    }
    
    @Override
    public int compareTo(Pair other) {
        return Integer.compare(this.dist, other.dist);
    }
}
