class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int n = piles.length;
        
        int start = 1;
        int end = getMax(piles);
        int result = Integer.MAX_VALUE;
        
        while(start <= end) {
            int mid = start + (end-start)/2;
            
            if(isValid(piles, h, mid)) {
                result = Math.min(result, mid);
                end = mid-1;
            } else {
                start = mid+1;
            }
        }
        
        return result;
    }
    
    boolean isValid(int[] piles, int h, int speed) {
        double hr = 0;
        for(int i = 0; i < piles.length; i++) {
            hr = hr+ Math.ceil(piles[i]*1.0/speed);
            
            if(hr > h)
                return false;
        }
        
        return true;
    }
    
    int getMax(int[] piles) {
        int max = 0;
        for(int pile: piles) {
            max = Math.max(max, pile);
        }
        return max;
    }
}
