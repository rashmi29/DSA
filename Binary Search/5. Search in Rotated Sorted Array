class Solution {
    public int search(int[] nums, int target) {
        int n = nums.length;
        if(n == 1) {
            if(nums[0] == target)
                return 0;
            else
                return -1;
        }
        
        int minIndex = findMinIndex(nums);
        
        int result1 = searchTarget(nums, target, 0, minIndex - 1);
        if(result1 != -1)
            return result1;
        
        int result2 = searchTarget(nums, target, minIndex, n-1);
        if(result2 != -1)
            return result2;
        
        return -1;
    }
    
    public  int searchTarget(int[] nums, int target , int left, int right) {
        
        
        while(left <= right) {
            int mid = (left+right) / 2;
            
            if(nums[mid] == target) 
                return mid;
            else if(nums[mid] < target) {
                left = mid +1;
            } else {
                right = mid - 1;
            }
        }
        
        return -1;
    }
    
    public int findMinIndex(int[] nums) {
        int n = nums.length;
        int start = 0, end = n-1;
        
        if(nums[start] < nums[end]) 
            return 0;
        
        while(start <= end) {
            int mid = start + (end-start)/2;
            int prev = (mid + n - 1)%n;
            
            if(nums[mid] <= nums[prev])
                return mid;
            else if(nums[0] <= nums[mid]) {
                start = mid+1;
            } else {
                end = mid-1;
            }
        }
        return -1;
    }
}
