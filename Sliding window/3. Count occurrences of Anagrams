package sliding.windows;

import java.util.*;

public class Solutions {

    static int countAnagram(String str, String ptn) {
        int count = 0;
        int result = 0;
        int i = 0, j = 0;

        int n = str.length();
        int k = ptn.length();
        Map<Character, Integer> map = new HashMap<>();

        // create map for pattern
        for(char charInPat : ptn.toCharArray()) {
            map.put(charInPat,map.getOrDefault(charInPat, 0) +1);
            count++;
        }

        while(j<n) {
            // calculation
            if(map.containsKey(str.charAt(j))) {
                map.put(str.charAt(j), map.get(str.charAt(j))-1);
                count--;
            }

            if(j-i+1 < k) {
                j++;
            } else if(j-i+1 == k) {
                // get ans from calculation
                if(count == 0) {
                    result++;
                }

                // Remove i related calculation from map
                if(map.containsKey(str.charAt(i))) {
                    map.put(str.charAt(i), map.get(str.charAt(i))+1);
                    count++;
                }

                // slide the window
                i++;
                j++;
            }
        }
        return result;
    }

    static int search(String pat, String txt) {

        Map<Character, Integer> map = new HashMap<>();
        // create map for txt

        for(int i = 0; i < txt.length(); i++) {
            map.put(txt.charAt(i), map.getOrDefault(txt.charAt(i), 0)+1);
        }

        int count = map.size();
        int i = 0, j = 0;
        int k = txt.length();
        int n = pat.length();
        int result = 0;

        while(j < n) {
            if(map.containsKey(pat.charAt(j))) {
                if( (map.get(pat.charAt(j))) > 0 ) {
                    map.put(pat.charAt(j), map.get(pat.charAt(j)) - 1);

                    if(map.get(pat.charAt(j)) == 0) {
                        count--;
                    }
                }

            }

            if(j-i+1 < k) {
                j++;
            } else if(j-i+1 == k) {
                if(count == 0) {
                    result++;
                }

                char currChar = pat.charAt(i);
                if(map.containsKey(currChar)) {
                    map.put(currChar, map.getOrDefault(pat.charAt(i), 0)+1);
                    if(map.get(currChar)==1) {
                        count++;
                    }
                }

                i++;
                j++;
            }
        }
        return result;
    }
}
