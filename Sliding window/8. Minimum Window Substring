class Solution {
    public String minWindow(String s, String t) {
        int result = Integer.MAX_VALUE;
        int start = -1, end = -1;

        if(s.length() == 0 || t.length() == 0)
            return "";

        int i = 0, j = 0;
        Map<Character, Integer> map = new HashMap<>();

        for(Character ch : t.toCharArray()) {
            map.put(ch, map.getOrDefault(ch, 0) +1);
        }
        int count = map.size();

        int n = s.length();
        while(j < n) {
            char currChar = s.charAt(j);
            if(map.containsKey(currChar)) {
                map.put(currChar, map.get(currChar)-1);

                if(map.get(currChar) == 0)
                    count--;
            }

            if(count == 0) {
                if(j-i+1 < result) {
                    start = i;
                    end = j;
                    result = j-i+1;
                }

                while(count == 0) {
                    char ch = s.charAt(i);
                    if(map.containsKey(ch)) {
                        map.put(ch, map.get(ch)+1);

                        if(map.get(ch) == 1) {
                            count++;
                        }
                    }

                    i++;

                    if(j-i+1 < result && count == 0) {
                        start = i;
                        end = j;
                        result = j-i+1;
                    }
                }
            }
            j++;
        }
        
        StringBuilder sb = new StringBuilder();
        if(start != -1 && end != -1) {
            sb.append(s.substring(start,end+1));
        }
        return sb.toString();
    }
}
