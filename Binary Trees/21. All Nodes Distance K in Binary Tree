/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        List<Integer> ans = new ArrayList<>();
        HashMap<TreeNode, TreeNode> map = new HashMap<>();
        HashMap<TreeNode, Boolean> visited = new HashMap<>();
        getParent(root, map);
        
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(target);
        visited.put(target, true);
        
        int currK = 0;
        
        while(!q.isEmpty() && currK < k) {
            int size = q.size();
            
            currK++;
            for(int i = 0; i < size; i++) {
                TreeNode node = q.poll();
                
                if(node.left != null && visited.get(node.left) == null){
                    q.offer(node.left);
                    visited.put(node.left, true);
                }
                
                if(node.right != null && visited.get(node.right) == null){
                    q.offer(node.right);
                    visited.put(node.right, true);
                }
                
                if((map.get(node) != null) && visited.get(map.get(node)) == null) {
                    q.offer(map.get(node));
                    visited.put(map.get(node), true);
                }
                
            }
            
        }
        
        List<Integer> result = new ArrayList<>();
        while(!q.isEmpty()) {
            result.add(q.poll().val);
        }
        return result;
    }
    
    void getParent(TreeNode root, HashMap<TreeNode, TreeNode> map) {
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        
        while(!q.isEmpty()) {
            int size = q.size();
            
            for(int i = 0 ; i < size; i++) {
                TreeNode node = q.poll();
                
                if(node.left != null) {
                    map.put(node.left, node);
                    q.offer(node.left);
                }
                
                if(node.right != null) {
                    map.put(node.right, node);
                    q.offer(node.right);
                }
            }
        }
    }
}
