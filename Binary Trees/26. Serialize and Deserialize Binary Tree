/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null)
            return "";
        
        StringBuilder str = new StringBuilder();
        
        //Level order traversal where n=null and , is node sepration
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);

        while(!q.isEmpty()) {
            int size = q.size();
            
            for(int i = 0; i < size; i++) {
                TreeNode node = q.poll();
                if(node == null){
                    str.append("n,");
                    continue;
                }
                
                str.append(node.val+",");
                
                q.offer(node.left);
                q.offer(node.right);
            }
        }
        
        return str.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        
        if(data.equals(""))
            return null;
        
        String[] nodeArr = data.split(",");
        Queue<TreeNode> q = new LinkedList<>();
        
        TreeNode root = new TreeNode(Integer.parseInt(nodeArr[0]));
        q.offer(root);
        
        for(int i = 1 ; i < nodeArr.length; i++) {
            TreeNode parent = q.poll();
            if(!nodeArr[i].equals("n")){
                TreeNode left = new TreeNode(Integer. parseInt(nodeArr[i]));
                parent.left = left;
                q.add(left);
            }
            
            if(!nodeArr[++i].equals("n")){
                TreeNode right = new TreeNode(Integer. parseInt(nodeArr[i]));
                parent.right = right;
                q.add(right);
            }
        }
        
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
