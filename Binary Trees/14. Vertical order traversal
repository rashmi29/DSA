/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> tmap = new TreeMap<>();

        Queue<Tuple> q = new LinkedList<>();
        
        q.offer(new Tuple(0, 0, root));
        
        while(!q.isEmpty()) {
            int size = q.size();
            
            for(int i = 0; i < size; i++) {
                Tuple tos = q.poll();
                int vertical = tos.vertical;
                int level = tos.level;
                TreeNode node = tos.node;
                
                if(!tmap.containsKey(vertical)) {
                    tmap.put(vertical, new TreeMap<>());
                }
                
                if(!tmap.get(vertical).containsKey(level)) {
                    tmap.get(vertical).put(level, new PriorityQueue<>());
                }
                
                tmap.get(vertical).get(level).offer(node.val);
                
                
                if(node.left != null)
                    q.offer(new Tuple(vertical-1, level+1, node.left));
                
                if(node.right != null)
                    q.offer(new Tuple(vertical+1, level+1, node.right));
                
            }
        }
        
        List<List<Integer>> result = new ArrayList<>();
        for(TreeMap<Integer, PriorityQueue<Integer>> entry: tmap.values()) {
            result.add(new ArrayList<>());
            
            for(PriorityQueue<Integer> nodes: entry.values()) {
                while(!nodes.isEmpty()) {
                    result.get(result.size()-1).add(nodes.poll());
                }
                
            }
            
        }
        return result;
    }
}

class Tuple {
    int vertical, level;
    TreeNode node;
    
    Tuple(int vertical, int level, TreeNode node) {
        this.vertical = vertical;
        this.level = level;
        this.node = node;
    }
}
