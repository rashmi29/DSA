/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> rightview = new ArrayList<>();
        
        if(root == null)
            return rightview;
        
        List<List<Integer>> levelorder = new ArrayList<>();
        
        bfs(root, levelorder);
        
        //System.out.println(levelorder);
        
        for(List<Integer> level : levelorder) {
            rightview.add(level.get(level.size() - 1));   
        }
        
        return rightview;
    }
    
    public void bfs(TreeNode root, List<List<Integer>> ds) {
        Queue<TreeNode> q = new LinkedList<>();
        
        q.offer(root);
        
        while(!q.isEmpty()) {
            int size = q.size();
            List<Integer> tmpList = new ArrayList<>();
            
            for(int i = 0 ; i < size; i++) {
                TreeNode node = q.poll();
                tmpList.add(node.val);
                
                if(node.left != null)
                    q.offer(node.left);
                if(node.right != null)
                    q.offer(node.right);
            }
            ds.add(tmpList);
        }
    }
}
