/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        int n = inorder.length;
        
        HashMap<Integer, Integer> inMap = new HashMap<>();
        for(int i = 0; i < n; i++) {
            inMap.put(inorder[i], i);
        }
        
        TreeNode root = buildTreeInPost(inorder, 0, n-1,  postorder, 0, n-1, inMap);
        
        return root;
    }
    
    TreeNode buildTreeInPost(int[] inorder , int inStart, int inEnd, int[] postorder, int postStart, int postEnd, HashMap<Integer, Integer> inMap) {
        
        if(inStart > inEnd || postStart > postEnd)
            return null;
        
        TreeNode root = new TreeNode(postorder[postEnd]);
        
        int indexEle = inMap.get(postorder[postEnd]);
        int numOnLeft = indexEle - inStart;
        
        root.left = buildTreeInPost(inorder, inStart, indexEle-1, postorder, postStart, postStart+numOnLeft-1, inMap);
        root.right = buildTreeInPost(inorder, indexEle+1, inEnd, postorder, postStart+numOnLeft, postEnd-1, inMap);
        
        return root;
    }
}
